Python Books:

download: www.b-ok.org

Beginner: 
1. Matt Harrison Vol 1 and Vol 2
2. python-course.eu

Intermediate to Expert:
1. Brett Slatkin - 59 ways Effective Python x
2. Ramalho - Fluent Python 
3. Ziade - Expert Python Programming

Reference:
Beazley - Python Cookbook

Coding Standards : https://www.python.org/dev/peps/pep-0008/

---------------------------------------------------------------------------------------------------------
Python Interpreter - REPL : Read Evaluate Print Loop

Versions 2.7 and 3 - 2.7 will not get updates after 2020

input("Enter year: ") -> int
raw_input("Enter month: ") -> str

Data types;

month = "April"
day = 28
interest_rate = 7.5

type(variable) -> str, int, bool, float

Collections/Sequences -> list, tuple, dict, set

Operators:
4 + 3
4 - 3
4 * 3
4 / 3
4 / 3.0
4 ** 2

print "This month is ", month
print "This month is {0}" .format(month)
print "This month is {0}, this year is {1}" . format(month, year)

Operators:

	= != < <= > >=
	
Conditionals:
	
if   :
elif :
else :

basic function

/* Write a Program */

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

STRING:

str = "hello"
for i in str:
	print i			# print each character of the string, one per line
	
str = ""
if str:
	print "not empty"
else:
	print "empty"  	#PRINTS empty

LIST:

range() function
	
a = [1, 2, 3]
a[1] = 4

TUPLE:
b = (1, 2, 3)
b[1] = 4

LIST FUNCTIONS:
1. list 

a = "str"
b = list(a)
print b

2. len(a)

3. max(a)

4. min(a)

5. enumerate(a)

LIST METHODS (RICE PAIRS)
reverse
insert(index, value)
count(value) #how many times
extend  #why extending with int is a problem but list is not?

pop       # difference between pop and remove
append	  # can append with an int, but cannot extend with an int
index(value) 
remove(value)
sort		#what is for descending order sort?

#Difference between Append and Extend ?

myList = []
if not myList:
	print("empty")

if len(li) == 0: # takes too much time

Numpythonic way is:
if myList.size:

import timeit #check for execution time
----------------------------------------
li = [1]
li.append([2,3]) # Size is 2. It is now [1, [2,3] ]

li.extend([2,3])   # size would be 3. It is [1,2,3]
li.extend(["bat"]) # size would be 4. It is [1, 'b', 'a', 't']

----------------------------------------

Enumerate function:

For index, value in enumerate(list_a):
	print index, value

SLICING concept of lists
a[start: end]  -------------> a[start], a[start+1], a[start+2]....a[end-1]
start = start index, keep collecting until you see end index

* a[start: end]  -------------> a[start], a[start+1], a[start+2]....a[end-1]
* a[ : end]  -------------> Last value is a[end-1]. Take everything from start upto last value
* a[ start : ]  -------------> First value is a[start]. Take everything from here since end value is not given
* a[:]  --> Take everything


TUPLES:

a = [1]
type(a)

a = (2 + 3)
type(a)

a = (2)
type(a)

Correct way to initialize a tuple with one element?

Use:
#immutable so values that should not be changed
#return multiple values from a function

SETS:

Use of set: List of 40000 names:


Union |
Difference -
Intersection &
Xor ^

Iterations:

for number in [1, 2, 3, 4]:
	print number
	
animals = [" cat", "dog", " bird "]
for index in range (len( animals )):
	print index , animals [ index ]

break, continue keywords as in other languages

break = skip out of a loop
continue = go back to the top of the loop statements

Wednesday May 2:

sales = { "Jan" : 10000, "Feb":15000, "Apr":20000 }

FUNCTIONS:
len(dict)
del dict(key)
if "key" in dict:
if "key" not in dict:

METHODS
dict2 = dict1.copy()
dict2.update(dict1) # This merges two dictionaries
dict2.keys()
dict2.values()
dict2.clear()

ITERATING
for key in dict1:
for key in dict1.iterkeys():
for val in dict1.itervalues():

for key in dict1:
	print key

CONVERTING DICTIONARY TO LIST
sales = { "Jan" : 10000, "Feb":15000, "Apr":20000 }
sales_list = sales.items() #List of tuples

[('Jan', 10000), ('Feb', 15000), ('Apr', 20000)] 
This is a 2-d array. To reference each element:
sales2_list[0][1] #prints 10000

CONVERTING LIST TO DICT
months = {"Jan", "Feb", "Mar"}
profits = {1000, 2000, 3000}
data = zip(months, profits)   #This is NOT YET a Dict. This is a 2-tuple LIST
data_dict = dict(data)  #NOW DICTIONARY

FILES:

Modes: r, a, w

1. Reading from a file

fobj = open("visitors.txt")      # Default mode is Read
for line in fobj:
    print line.rstrip()
fobj.close()

2. Writing to a file

fobj1 = open("visitors.txt", "r")      
fobj2 = open("visitorscopy.txt", "w")  
line_no = 1
for line in fobj1:
	fobj2.write(str(line_no) + " : " + line)
	line_no = line_no + 1
fobj1.close()
fobj2.close()
print "No of lines written: ", line_no - 1

3. Reading and storing into a string

content = open("visitors.txt").read()
content = open("visitors.txt").readlines()

Day 3 May 3 2018:

LIST COMPREHENSIONS:
Comprehension = understanding
* features of the languages convenient for speedy execution and readability
* mainly seen with respect to loops

x = [ i for i in range(1,100) if i % 5 == 0]
y = [formatter(i) for i in x]
z = [x*x for x in range(3)]
x = [1,2,3,4]
x = [ i for i in x if i%2 == 0 ]  #truncate x to even numbers only

for ___ in ___  #VERY HIGHLY USED : 1) Lists 2) Strings 3) files 3) set 4) tuple 5) dict 6) range

def formatter(n):
	return '%.2f' % (n)

x = [1, 2, 3]
y = [formatter(i) for i in x]
print y

[1.00, 2.00, 3.00]

x = [ i for i in range(1,100) if i % 5 == 0]
x
[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
x = 1
print '%d' %(x)
1
x = 1.5
print '%d' %(x)

ITERATION : Walking through items (set, string, dict, list, range, file.....)
In Python, iterable and iterator have specific meanings.

Iterable : 						# Example of iterable is string, list, set #allows iteration to take place #THINK OF 'NEGOTIABLE SALARY'
	object with __iter__ method
	returns an Iterator
Iterator:
	object with a __next__ method

__iter__
__next__   =====> Magic Methods - 30 to 50 of them. 

"dunder iter" -> __iter__  

	
>>> s = "hello"
>>> itr = iter(s)                        <---- iter method called on iterable returns an iterator
>>> itr
<iterator object at 0x01BB92D0>
>>> next(itr)							  <---- next method called on iterator keeps returning until StopIteration exception is thrown
'h'
>>> next(itr)
'e'
>>> next(itr)
'l'
>>> next(itr)
'l'
>>> next(itr)
'o'
>>> next(itr)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

GENERATOR:
>>> mygenerator = (x*x for x in range(3))
>>> for i in mygenerator:
...    print(i)
0
1
4

print mygenerator  # prints <generator object>
Generators dont store things in memory, they just temporarily generate values on the fly and lose them!

>>> x = [x*x for x in range(3)]
>>> for i in x:
...     print i
...
0
1
4
>>> print x
[0, 1, 4]

GENERATOR FUNCTIONS AND YIELD KEYWORD:

def genFunc():
	print "we are in generator function"
	x = range(3)
	for i in x:
		yield i
	
* Generator function has a yield keyword, not return
* Generator functions returns a generator

gen_obj = genFunc()
print (gen_obj) 
<generator object genFunc> 

#How does it know it is a generator object? 
	because function has a yield keyword
#Is the function code executed?
	Not yet!
#When will it start executing?
	When a for statement is used
	
for i in gen_obj:
	print i

we are in generator function	
0				<- in the first call, it executes the function till the first yield value
1				<- second call, directly goes to next yield value...and so on
2

>>> gen_obj = genFunc()
>>> gen_obj.next()
foo
0
>>> gen_obj.next()
1
>>> gen_obj.next()
2
>>> gen_obj.next()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

Function that parses a long list....
			100,000 elements
			yield forces the compiler to handle a data structure one element at a time
			Generator function executes step by step, gradually walks through elements in a collection

INTRODUCTION TO CLASSES:

A class is an entity represented in terms of DATA + FUNCTIONS

FUNCTIONS IN A CLASS:
	__init__ : default function called whenever a class is used to create an object
	__del__  : default function called whenever an object goes out of scope
			
Sample Program for classes:

import random

class Team:
	def __init__(self, name):
		print "setting team name to %s" % (name)
		self.teamName = name
	
	def playInnings(self):
		self.overs = 0
		self.teamTotal = 0
		self.wicketsLost = 0
		while (self.overs < 20 and self.wicketsLost < 10):
			runsPerOver = random.randint(0,15)
			self.teamTotal = self.teamTotal + runsPerOver
			if (runsPerOver < 3):
				self.wicketsLost = self.wicketsLost + 1
			self.overs = self.overs + 1
		print "Finished playing the innings"
	
	def __del__(self):
		print "%s scored %d runs losing %d wickets in %d overs" % (self.teamName, 
																   self.teamTotal,
																   self.wicketsLost,
																   self.overs)

team1, team2 = Team("RCB"), Team("MI")
team1.playInnings()
team2.playInnings()

			
			
to do:
#what is for descending order sort?
#why extending with int is a problem but list is not? appending with int works
#check default variable types in Python 3
#default data type in Python 3
# Discussion on PEP8 Coding standards
# code snippets generators
# LOT OF EXAMPLES on Best Practices
#UnitTest library??
#packaging??
#multithreading !!
#Design patterns - seminar
#classes-inheritance gfg notes?



Coming up next:
Decorators, Lambdas, Generators, Classes, Regular Expressions, Exceptions, Introduction to AWS


